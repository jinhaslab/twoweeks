[["tables-for-public-health-1.html", "Chapter 6 Tables for public health 1 6.1 데이터표 준비 6.2 Central Tendency (mean, median, mode) 6.3 Count and Distribution 6.4 정리 1", " Chapter 6 Tables for public health 1 6.1 데이터표 준비 데이터 표를 만드는 실습은 6차 근로환경조사 자료를 통해 실습할 것입니다.. 자료는 안전보건공단, 근로환경조사 원시자료 사이트 (http://kosha.or.kr/kosha/data/primitiveData.do) 에서 신청할 수 있습니다.. 시각화는 표와 그래프 둘을 다룰 것이고, 표는 보건학에서 주로 사용하는 표1,2,3과 그래프는 막대 그래프부터 시계열 자료까지 나타내도록 하겠습니다. 실습에 필요한 라이브러리를 불러오겠습니다. if(!require(&quot;tidyverse&quot;)) install.packages(&quot;tidyverse&quot;) if(!require(&quot;htmlTable&quot;)) install.packages(&quot;htmlTable&quot;) if(!require(&quot;haven&quot;)) install.packages(&quot;haven&quot;) 데이터를 불러오겠습니다. 안전보건공단 홈페이에서 자료를 다운 받는게 원칙입니다. 다만 실습을 빠르게 진행하기 위해서, dspubs.org 페이지에 있는 파일을 이용하겠습니다. dspubs.org open_data url &lt;- &quot;https://dspubs.org/webapps/forum/open_data/kwcs6th.sav&quot; download.file(url, &quot;data/kwcs6th.sav&quot;) kwcs &lt;- read_sav(&quot;data/kwcs6th.sav&quot;) unicode chart 표를 만들다 보면 크다, 작다, 같다 등은 표시가 쉬운 반면, 크거나 같다, 작거나 같다 등은 표시가 어렵습니다. 이 때 사용해야할 것이 unicode 입니다. 보건학에서 필요한 대표적 유니코드는 사실 2개입니다. 크거나 같다, 작거나 같다. 나머지는 키보드에 이미 있으니 이것을 사용하면 됩니다. 추가적인 unicode는 아래의 항목을 통해 살펴 볼수 있습니다. Unicode Chart tibble( &quot;symbole &quot; = c(&quot;\\u2264&quot;, &quot;\\u2265&quot;, &quot;\\u00b1&quot;), &quot;unicode &quot; = c(&quot;u2264&quot;, &quot;u2265&quot;, &quot;u00b1&quot;) ) %&gt;% addHtmlTableStyle(css.cell = c(&quot;width: 100;&quot;,&quot;width: 100;&quot;)) %&gt;% htmlTable(caption =&quot;Simple unicode and symbols&quot;) Simple unicode and symbols symbole unicode 1 ≤ u2264 2 ≥ u2265 3 ± u00b1 다음과 같이 사용할 수 있습니다. 여기사 \\는 “escape character”로 뒤에 오는 것이 문자가 아니라 약솓된 결과를 나타내 달라는 뜻입니다. print(&quot;x \\u2264 10&quot;) ## [1] &quot;x ≤ 10&quot; 그럼 어떻게 문자를 사용할까요? print 명령을 위와 같이 사용하는 것도 좋지만, 변수를 생성하기에는 좋은 방법이 따로 있습니다. 좋은 방법이란 처음에는 어렵지만, 알고나면 엄청난 것들을 말합니다. paste와 sprintf 입니다. 어떤 것이 좋은가요?. 우리의 목표가 데이터 표현을 자동화 하는 것인데, 자동화를 위해서는 구조를 만들고 거기에 값을 대입 시키는 것이 기본입니다. 그러니, sprintf 를 더 자주 사용하게 됩니다. paste는 모두 붙여 주는 것이니, 쉽게 이해될 것이고, sprintf는 %s 마다 무언가를 넣어 붙여 주는 방식입니다. paste와 sprintf는 정말 자주 사용되는 함수이니 꼭 익숙해 지시기 바랍니다. xp1 = paste(&quot;x&quot;, &quot;\\u2264&quot;, &quot;10&quot;) xp2 = sprintf(&quot;x %s 10&quot;, &quot;\\u2264&quot;) xp1 ## [1] &quot;x ≤ 10&quot; xp2 ## [1] &quot;x ≤ 10&quot; 데이터 확인 데이터의 변수를 확인하는 방법은 colnames() , names() 또는 head()를 하용하는 것입니다. 약 400개의 변수가 있으므로, 처음부터 10번째까지 [1:10] 변수를 찾아 보겠습니다. colnames(kwcs)[1:10] ## [1] &quot;id&quot; &quot;wt&quot; &quot;area&quot; &quot;hh_num&quot; &quot;hm_01_gender&quot; ## [6] &quot;hm_01_year&quot; &quot;hm_01_estat&quot; &quot;hm_01_rel_t&quot; &quot;hm_02_gender&quot; &quot;hm_02_year&quot; 그럼 45번째 변수 부터 50번째 변수까지 찾아 보겠습니다. []안을 채워보세요. colnames(kwcs)[ ] ## [1] &quot;target&quot; &quot;YEAR&quot; &quot;ESTAT&quot; &quot;AGE&quot; &quot;country&quot; ## [6] &quot;country_etc&quot; 연령인 AGE가 있네요, 성별에 대한 AGE도 있습니다. 그럼 이것을 이용해서 실습을 해보겠습니다. 변수를 하나 선택하는 것은 데이터에 $ 표시를 하고 이후에 변수를 넣는 방식입니다. “데이터\\(변수&quot; 입니다. 10개만 보겠습니다. 숫자 처럼 보이네요, 확인하겠습니다. `class(kwcs\\)AGE)`를 이용해봅니다. numberic 으로 숫자입니다. 숫자여야 평균 표준편차 등의 계산이 가능합니다. kwcs$AGE[1:10] ## [1] 74 54 64 78 78 65 61 57 38 47 class(kwcs$AGE) ## [1] &quot;numeric&quot; 이번에는 SEX 변수(variable)의 변수값(value)를 살펴 보겠습니다. class 가 무엇일까요? double 또는 interger 라고 나올 텐데요, R에서는 numberic 값에 interger와 double 속성을 사용한다고 생각하시면 됩니다. 다만 label을 붙여 놓아서 알기 쉽게 되어 있네요. kwcs$TSEX[1:10] ## &lt;labelled&lt;double&gt;[10]&gt;: ▣ 분석 데모변수 : 응답자 성별 ## [1] 2 2 2 1 1 2 1 2 1 2 ## ## Labels: ## value label ## 1 남성 ## 2 여성 class(kwcs$TSEX) ## [1] &quot;haven_labelled&quot; &quot;vctrs_vctr&quot; &quot;double&quot; 국적에 대해서도 알아보겠습니다. character 이네요. 한국에서 시행한 조사라, 한국 국적은 빈칸으로, 이외에는 국적을 적었습니다. kwcs$country_etc를 해보면, 대부분 빈칸입니다. 빈칸인 경 ==\"\", 빈칸이 아닌 경우 !=\"\"을 이용해서 어떤 국적이 있는지 살펴 보겠습니다. class(kwcs$country_etc) ## [1] &quot;character&quot; kwcs$country_etc[kwcs$country_etc != &quot;&quot;][1:10] ## [1] &quot;베트남&quot; &quot;중국&quot; &quot;캐나다&quot; &quot;중국&quot; &quot;중국&quot; &quot;중국&quot; ## [7] &quot;중국&quot; &quot;중국&quot; &quot;파키스탄&quot; &quot;중국&quot; 근로자의 지위를 알아 보겠습니다. 근로자 지위는 emp_stat 입니다. 1은 상용근로자, 2는 임시근로자, 3은 일용근로자 입니다. kwcs$emp_stat kwcs$emp_stat %&gt;% head() ## &lt;labelled&lt;double&gt;[6]&gt;: Q6.임금근로자_고용형태 ## [1] NA 1 3 NA NA 1 ## ## Labels: ## value label ## 1 상용근로자 ## 2 임시근로자 ## 3 일용근로자 매우 중요한 개념이 나옵니다. 빈칸과 NA 입니다. 모두 값에 대한 정보가 없다는 것입니다. 값에 대한 정보가 없으면 어떻게 해야 할지는 매우 중요한 개념입니다. 우선 여기서는 값에 대한 정보가 없는 것을 제외하고 분석해 보겠습니다. 값에 대한 정보가 없는 데이터는 제거하여, 새로운 데이터를 만들겠습니다. 이때 filter 라는 것을 이용합니다. is.na라는 것은 NA라는 것을 의미하고, 앞에 !는 그 반대를 말합니다. kwcs %&gt;% filter(!is.na(emp_stat)) ## # A tibble: 33,063 × 438 ## id wt area hh_num hm_01_gender hm_01_year hm_01_estat hm_01_rel_t ## &lt;dbl&gt; &lt;dbl&gt; &lt;dbl+lbl&gt; &lt;dbl&gt; &lt;dbl+lbl&gt; &lt;dbl&gt; &lt;dbl+lbl&gt; &lt;dbl+lbl&gt; ## 1 2 0.137 3 [대구] 1 2 [여성] 1966 1 [임금 근… 0 [응답자 … ## 2 3 0.350 3 [대구] 1 2 [여성] 1956 1 [임금 근… 0 [응답자 … ## 3 6 0.156 7 [울산] 1 2 [여성] 1955 2 [일이 있… 0 [응답자 … ## 4 7 0.344 7 [울산] 1 1 [남성] 1959 1 [임금 근… 0 [응답자 … ## 5 9 0.168 7 [울산] 1 1 [남성] 1982 1 [임금 근… 0 [응답자 … ## 6 10 0.675 6 [대전] 4 2 [여성] 1973 1 [임금 근… 0 [응답자 … ## 7 18 2.71 6 [대전] 4 1 [남성] 1972 1 [임금 근… 0 [응답자 … ## 8 19 3.83 3 [대구] 5 1 [남성] 1969 1 [임금 근… 3 [부모] … ## 9 20 2.90 3 [대구] 4 1 [남성] 1960 1 [임금 근… 3 [부모] … ## 10 21 2.09 3 [대구] 3 2 [여성] 1940 1 [임금 근… 0 [응답자 … ## # … with 33,053 more rows, and 430 more variables: hm_02_gender &lt;dbl+lbl&gt;, ## # hm_02_year &lt;dbl&gt;, hm_02_estat &lt;dbl+lbl&gt;, hm_02_rel_t &lt;dbl+lbl&gt;, ## # hm_03_gender &lt;dbl+lbl&gt;, hm_03_year &lt;dbl&gt;, hm_03_estat &lt;dbl+lbl&gt;, ## # hm_03_rel_t &lt;dbl+lbl&gt;, hm_04_gender &lt;dbl+lbl&gt;, hm_04_year &lt;dbl&gt;, ## # hm_04_estat &lt;dbl+lbl&gt;, hm_04_rel_t &lt;dbl+lbl&gt;, hm_05_gender &lt;dbl+lbl&gt;, ## # hm_05_year &lt;dbl&gt;, hm_05_estat &lt;dbl+lbl&gt;, hm_05_rel_t &lt;dbl+lbl&gt;, ## # hm_06_gender &lt;dbl+lbl&gt;, hm_06_year &lt;dbl&gt;, hm_06_estat &lt;dbl+lbl&gt;, … 요통에 대한 변수는 heal_prob1 입니다. 이 변수를 확인해 보겠습니다. 1번은 있다, 2번은 업다, 8번은 무응답, 9번은 거절입니다. 이제 빈칸과 NA가 아니더라도 필요없는 정보가 있습니다. 모르거나/무응답했거나, 거절한 사람입니다. 이를 제거해 보겠습니다. kwcs %&gt;% filter(!is.na(emp_stat)) %&gt;% filter(!is.na(heal_prob1)) %&gt;% filter(heal_prob1 !=8) %&gt;% filter(heal_prob1 !=9) 이번에는 heal_prob1 에 1, 2 인 사람만 포함시켜 보겠습니다. 어떤 것이 더 편한가요? kwcs %&gt;% filter(!is.na(emp_stat)) %&gt;% filter(!is.na(heal_prob1)) %&gt;% filter(heal_prob1 %in% c(1, 2)) 이번에는 sleep1이라는 변수를 살펴 보겠습니다. sleep1이라는 변수는 잠들기 어려운 것이 매일(1), 한주에 여러번 (2), 한달에 여러번(3), 드물게(5), 전혀 없음(5) 의 5점 척도 입니다. 이데 모름과 거절, 그리고 NA 값을 제거해 보겠습니다. 그리고 dat라는 새로운 data를 만들고 kwcs를 제거 하겠습니다. dat를 이용해서 분석을 해보겠습니다. 지금까지 사용했던, TSEX, AGE, emp_stat, heal_prob1, sleep1 의 변수를 사용하겠습니다. dat &lt;- kwcs %&gt;% filter(!is.na(emp_stat)) %&gt;% filter(!is.na(heal_prob1)) %&gt;% filter(heal_prob1 %in% c(1, 2)) %&gt;% filter(sleep1 %in% c(1:5)) %&gt;% select(TSEX, AGE, emp_stat, heal_prob1, sleep1, sleep2, sleep3) rm(kwcs) dat를 살펴보겠습니다. head(dat) ## # A tibble: 6 × 7 ## TSEX AGE emp_stat heal_prob1 sleep1 sleep2 sleep3 ## &lt;dbl+lbl&gt; &lt;dbl&gt; &lt;dbl+lbl&gt; &lt;dbl+lbl&gt; &lt;dbl+lbl&gt; &lt;dbl+lb&gt; &lt;dbl+l&gt; ## 1 2 [여성] 54 1 [상용근로자] 2 [없다] 5 [전혀없음] 5 [전혀… 5 [전… ## 2 2 [여성] 64 3 [일용근로자] 2 [없다] 2 [한 주에 여러 번] 2 [한 … 2 [한 … ## 3 2 [여성] 65 1 [상용근로자] 2 [없다] 5 [전혀없음] 5 [전혀… 5 [전… ## 4 1 [남성] 61 3 [일용근로자] 1 [있다] 4 [드물게] 4 [드물… 4 [드… ## 5 1 [남성] 38 1 [상용근로자] 2 [없다] 5 [전혀없음] 5 [전혀… 5 [전… ## 6 2 [여성] 47 1 [상용근로자] 2 [없다] 5 [전혀없음] 4 [드물… 5 [전… 6.2 Central Tendency (mean, median, mode) 대표값중 가장 많이 사용하는 것은 mean 과 median 입니다. 이것을 나타내는 표를 만들어 봅시다. 이것의 평균과 표준 편차를 을 구해 보겠습니다. mean(dat$AGE) ## [1] 46.564 sd(dat$AGE) ## [1] 14.45298 이번에는 “tidyverse”를 통해 pipe 코드를 짜 보겠습니다. 데이터를 변형하는 것은 다른 시간에 수행하겠지만, 여기서는 select와 filter, mutate, group_by를 사용하겠습니다. kwcs$TSEX 는 kwcs에서 TSEX를 select하라는 것으로 다름과 같이 사용할 수 있습니다. dat %&gt;% select(AGE) ## # A tibble: 33,007 × 1 ## AGE ## &lt;dbl&gt; ## 1 54 ## 2 64 ## 3 65 ## 4 61 ## 5 38 ## 6 47 ## 7 48 ## 8 23 ## 9 28 ## 10 80 ## # … with 32,997 more rows 6.2.1 하나씩 반복 이후 이것을 가지고 나와서 (pull), 이어 받고 (.) 평균을 구해보겠습니다. 이후 이것을 mean 과 sd 라는 변수에 assign 하겠습니다. dat %&gt;% select(AGE) %&gt;% pull(.) %&gt;% mean(.) ## [1] 46.564 dat %&gt;% select(AGE) %&gt;% pull(.) %&gt;% sd(.) ## [1] 14.45298 dat %&gt;% select(AGE) %&gt;% pull(.) %&gt;% mean(.) -&gt; mean dat %&gt;% select(AGE) %&gt;% pull(.) %&gt;% sd(.) -&gt; sd 그럼 표현해 볼까요? mean ## [1] 46.564 sd ## [1] 14.45298 paste(&quot;평균은 &quot;, mean, &quot;표준편차는 &quot;, sd) ## [1] &quot;평균은 46.5640015754234 표준편차는 14.4529846074525&quot; 보기 불편하네요, 소숫점 2째 자리까지 표현하겠습니다. round를 이용합니다. 더 자세한것은 구글에게 물어 보세요. mean &lt;- dat %&gt;% select(AGE) %&gt;% pull(.) %&gt;% mean(.) %&gt;% round(., 2) sd &lt;- dat %&gt;% select(AGE) %&gt;% pull(.) %&gt;% sd(.) %&gt;% round(., 2) paste(&quot;평균은&quot;, mean, &quot;, 표준편차는&quot;, sd) ## [1] &quot;평균은 46.56 , 표준편차는 14.45&quot; sprintf(&quot;평균은 %s, 표준편차는 %s&quot;, mean, sd) ## [1] &quot;평균은 46.56, 표준편차는 14.45&quot; unicode를 이용해서 약속된 표현을 사용해 보겠습니다. paste(mean, &quot;\\u00b1&quot;, sd) ## [1] &quot;46.56 ± 14.45&quot; sprintf(&quot;%s \\u00b1 %s&quot;, mean, sd) ## [1] &quot;46.56 ± 14.45&quot; sprintf 에서 %s 대신에 %.2f 를 사용할 텐데요, 어떤지 살펴 봅시다. 네 %2.f 라는 것은 소수 2째 자리까지 살려서 표현하는 방식입니다. %.2f 는 어떨까요? 공부하는 방법입니다. 무언가를 더 해보는 것! sprintf(&quot;%.2f \\u00b1 %.2f&quot;, mean, sd) ## [1] &quot;46.56 ± 14.45&quot; 그럼 median 을 구해볼까요? 해보세요. 무언가를 해보는 것! dat %&gt;% pull(AGE) %&gt;% median(.) ## [1] 46 dat %&gt;% pull(AGE) %&gt;% quantile(., c(0.5)) ## 50% ## 46 그럼 quantile을 구해볼까요? dat %&gt;% pull(AGE) %&gt;% quantile(., c(0.25, 0.5, 0.75)) ## 25% 50% 75% ## 35 46 57 p50 = dat %&gt;% pull(AGE) %&gt;% quantile(., c(0.50)) p25 = dat %&gt;% pull(AGE) %&gt;% quantile(., c(0.25)) p75 = dat %&gt;% pull(AGE) %&gt;% quantile(., c(0.75)) sprintf(&quot;%.0f (%.0f-%.0f)&quot;, p50, p25, p75) ## [1] &quot;46 (35-57)&quot; 이것을 남녀를 나누어서 해보겠습니다. filter 명령문을 써보겠습니다. filter(TSEX==1)이라는 것은 TSEX==1 인 남자만을 고르라는 것입니다. 평균은 아래와 같이 구합니다. sd도 구해봅시다. dat %&gt;% filter(TSEX==1) %&gt;% pull(AGE) %&gt;% mean(.) ## [1] 45.30149 dat %&gt;% filter(TSEX==2) %&gt;% pull(AGE) %&gt;% mean(.) ## [1] 47.67811 6.2.2 Group_by summary and Table 1 Group_by 남녀를 나누어서 평균을 구하는 다른 방법을 사용해 봅니다. dat %&gt;% group_by(TSEX) %&gt;% summarise(avg = mean(AGE), std = sd(AGE)) ## # A tibble: 2 × 3 ## TSEX avg std ## &lt;dbl+lbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 1 [남성] 45.3 13.9 ## 2 2 [여성] 47.7 14.8 동일한 결과가 나오나요. 네 굉장합니다. 남녀를 나누어서 계산했네요. 지금은 2개의 집단을 나누지만, 만약 100개의 집단이라면 filter를 반복하면 어떻게 해야하나요ㅠㅠ. group_by 는 정말 대단한 명령어 입니다. group_by로 코드 파이프 안에서 다음과 같은 결과를 얻었습니다. dat %&gt;% group_by(TSEX) %&gt;% summarise(avg = mean(AGE), std = sd(AGE)) %&gt;% mutate(smry = sprintf(&quot;%.2f \\u00b1 %.2f&quot;, avg, std)) ## # A tibble: 2 × 4 ## TSEX avg std smry ## &lt;dbl+lbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; ## 1 1 [남성] 45.3 13.9 45.30 ± 13.94 ## 2 2 [여성] 47.7 14.8 47.68 ± 14.80 그럼 중간값과 p25-p75를 표현해 봅시다. dat %&gt;% group_by(TSEX) %&gt;% summarise(avg = mean(AGE), std = sd(AGE), p25 = quantile(AGE, prob=c(0.25)), p50 = quantile(AGE, prob=c(0.50)), p75 = quantile(AGE, prob=c(0.75)), ) %&gt;% mutate(smry1 = sprintf(&quot;%.1f \\u00b1 %.1f&quot;, avg, std)) %&gt;% mutate(smry2 = sprintf(&quot;%.0f (%.0f-%.0f)&quot;, p50, p25, p75)) ## # A tibble: 2 × 8 ## TSEX avg std p25 p50 p75 smry1 smry2 ## &lt;dbl+lbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 1 [남성] 45.3 13.9 34 44 55 45.3 ± 13.9 44 (34-55) ## 2 2 [여성] 47.7 14.8 36 48 57 47.7 ± 14.8 48 (36-57) 이제 필요한 것만 남겨 보겠습니다. dat %&gt;% group_by(TSEX) %&gt;% summarise(avg = mean(AGE), std = sd(AGE), p25 = quantile(AGE, prob=c(0.25)), p50 = quantile(AGE, prob=c(0.50)), p75 = quantile(AGE, prob=c(0.75)), ) %&gt;% mutate(smry1 = sprintf(&quot;%.1f \\u00b1 %.1f&quot;, avg, std)) %&gt;% mutate(smry2 = sprintf(&quot;%.0f (%.0f-%.0f)&quot;, p50, p25, p75)) %&gt;% select(TSEX, smry1, smry2) ## # A tibble: 2 × 3 ## TSEX smry1 smry2 ## &lt;dbl+lbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 1 [남성] 45.3 ± 13.9 44 (34-55) ## 2 2 [여성] 47.7 ± 14.8 48 (36-57) 이번에는 같은 내용을 수면에 대해서 해보겠습니다. 수면 점수가 높다믄 것은 잠들기 어렵다는 것이 전혀 없음(5점)에 가깝다는 것입니다. 그러니 역의 점수를 만들겠습니다. 1, 2, 3, 4, 5로 기록된 것을 5, 4, 3, 2, 1로 바꾸고 싶은 것입니다. 아래를 이용할 것입니다. x= 1:5 y= 6-x y ## [1] 5 4 3 2 1 dat %&gt;% mutate(sleep1in = 6-sleep1) ## # A tibble: 33,007 × 8 ## TSEX AGE emp_stat heal_prob1 sleep1 sleep2 sleep3 sleep1in ## &lt;dbl+lbl&gt; &lt;dbl&gt; &lt;dbl+lbl&gt; &lt;dbl+lbl&gt; &lt;dbl+lbl&gt; &lt;dbl+l&gt; &lt;dbl+l&gt; &lt;dbl&gt; ## 1 2 [여성] 54 1 [상용근로자] 2 [없다] 5 [전혀없… 5 [전… 5 [전… 1 ## 2 2 [여성] 64 3 [일용근로자] 2 [없다] 2 [한 주… 2 [한 … 2 [한 … 4 ## 3 2 [여성] 65 1 [상용근로자] 2 [없다] 5 [전혀없… 5 [전… 5 [전… 1 ## 4 1 [남성] 61 3 [일용근로자] 1 [있다] 4 [드물게… 4 [드… 4 [드… 2 ## 5 1 [남성] 38 1 [상용근로자] 2 [없다] 5 [전혀없… 5 [전… 5 [전… 1 ## 6 2 [여성] 47 1 [상용근로자] 2 [없다] 5 [전혀없… 4 [드… 5 [전… 1 ## 7 1 [남성] 48 1 [상용근로자] 1 [있다] 5 [전혀없… 5 [전… 5 [전… 1 ## 8 1 [남성] 23 2 [임시근로자] 2 [없다] 4 [드물게… 4 [드… 4 [드… 2 ## 9 2 [여성] 28 1 [상용근로자] 2 [없다] 4 [드물게… 4 [드… 4 [드… 2 ## 10 2 [여성] 80 3 [일용근로자] 1 [있다] 4 [드물게… 4 [드… 4 [드… 2 ## # … with 32,997 more rows 이번에는 mutate을 이용해 새로운 변수를 생성해 보겠습니다. 변형된 dat는 dat1에 할당합니다. dat1&lt;-dat %&gt;% mutate(sleep1in = 6-sleep1, sleep2in = 6-sleep2, sleep3in = 6-sleep3 ) %&gt;% mutate(sexgp = case_when( TSEX ==1 ~ &quot;Men&quot;, TRUE ~ &quot;Women&quot; )) 이번에는 sexgp를 group으로 하여 성별, 연령의 대표값을 나나타내 봅시다. dat1 %&gt;% group_by(sexgp) %&gt;% summarise( avg = mean(AGE), std = sd(AGE), p50 = quantile(AGE, prob=c(0.50)), p25 = quantile(AGE, prob=c(0.25)), p75 = quantile(AGE, prob=c(0.75)) ) %&gt;% mutate(smry1= sprintf(&quot;%.1f \\u00b1 %.1f&quot;, avg, std), smry2= sprintf(&quot;%.0f (%.0f-%.0f)&quot;, p50, p25, p75) ) %&gt;% select(sexgp,smry1, smry2) ## # A tibble: 2 × 3 ## sexgp smry1 smry2 ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Men 45.3 ± 13.9 44 (34-55) ## 2 Women 47.7 ± 14.8 48 (36-57) html Table로 만들면 복사해서 붙여 넣기 매우 편리합니다. dat1 %&gt;% group_by(TSEX) %&gt;% summarise( avg = mean(AGE), std = sd(AGE), p50 = quantile(AGE, prob=c(0.50)), p25 = quantile(AGE, prob=c(0.25)), p75 = quantile(AGE, prob=c(0.75)) ) %&gt;% mutate(smry1= sprintf(&quot;%.1f \\u00b1 %.1f&quot;, avg, std), smry2= sprintf(&quot;%.0f (%.0f-%.0f)&quot;, p50, p25, p75) ) %&gt;% select(TSEX,smry1, smry2) %&gt;% htmlTable(caption =&quot;descritive statistics of study population&quot;) descritive statistics of study population TSEX smry1 smry2 1 1 45.3 ± 13.9 44 (34-55) 2 2 47.7 ± 14.8 48 (36-57) 그렇다면, sleep1 에 대해서도 만들어 보십시오. 연령과 sleep1 에 대한 대표값을 함께 볼 수 있을까요? 지금까지 배운 방법으로 해보도록 하겠습니다. tab1 = dat1 %&gt;% group_by(TSEX) %&gt;% summarise( avg = mean(AGE), std = sd(AGE), p50 = quantile(AGE, prob=c(0.50)), p25 = quantile(AGE, prob=c(0.25)), p75 = quantile(AGE, prob=c(0.75)) ) %&gt;% mutate(smry1= sprintf(&quot;%.1f \\u00b1 %.1f&quot;, avg, std), smry2= sprintf(&quot;%.0f (%.0f-%.0f)&quot;, p50, p25, p75) ) %&gt;% select(TSEX,smry1, smry2) %&gt;% mutate(variable = &quot;AGE&quot;) tab2 = dat1 %&gt;% group_by(TSEX) %&gt;% summarise( avg = mean(sleep1), std = sd(sleep1), p50 = quantile(sleep1, prob=c(0.50)), p25 = quantile(sleep1, prob=c(0.25)), p75 = quantile(sleep1, prob=c(0.75)) ) %&gt;% mutate(smry1= sprintf(&quot;%.1f \\u00b1 %.1f&quot;, avg, std), smry2= sprintf(&quot;%.0f (%.0f-%.0f)&quot;, p50, p25, p75) ) %&gt;% select(TSEX,smry1, smry2) %&gt;% mutate(variable = &quot;sleep1&quot;) 이 둘을 합쳐 보겠습니다. rbind(tab1, tab2) ## # A tibble: 4 × 4 ## TSEX smry1 smry2 variable ## &lt;dbl+lbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 1 [남성] 45.3 ± 13.9 44 (34-55) AGE ## 2 2 [여성] 47.7 ± 14.8 48 (36-57) AGE ## 3 1 [남성] 4.5 ± 0.8 5 (4-5) sleep1 ## 4 2 [여성] 4.3 ± 0.8 5 (4-5) sleep1 sleep1까지 했는데요, sleep2, sleep3 까지 하려면 어떻게 해야 하나요? 이것을 2번더 반복해야 합니다. 만약에 변수가 100개라면 어떻게 해야할까요, 네 1000번 하면됩니다. 좀 익숙한 표를 만들기 위해서 반복하는 것이 가장 기본이 됩니다. 그래도 이제는 이 방법을 응용해서, 컴퓨터가 쉽게 작동하는 방식으로 생각해 보겠습니다. 6.2.3 Long File and Table 1 long file 이제 group 대신에 group이 될 파일을 선택해서 long file로 만들어 보겠습니다. 원하는 파일만 골라 봅니다. 성에 따른 연령, sleep1, 2, 3를 정리해 보겠습니다. dat1 %&gt;% select(sexgp, AGE, sleep1in, sleep2in, sleep3in) ## # A tibble: 33,007 × 5 ## sexgp AGE sleep1in sleep2in sleep3in ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Women 54 1 1 1 ## 2 Women 64 4 4 4 ## 3 Women 65 1 1 1 ## 4 Men 61 2 2 2 ## 5 Men 38 1 1 1 ## 6 Women 47 1 2 1 ## 7 Men 48 1 1 1 ## 8 Men 23 2 2 2 ## 9 Women 28 2 2 2 ## 10 Women 80 2 2 2 ## # … with 32,997 more rows 이러한 파일을 wide라고 부릅니다. 이제 우리는 TSEX별, AGE와 Sleep1의 값을 얻고자 합니다. 그러면 TSEX와 AGE, TSEX와 Sleep이 하나의 group이 됩니다. group을 반복한것과 같습니다. 즉 group의 기본은 -로 제외하고, 이와 상관되는 변수는 모두 포함하여 variables라는 이름으로 만들고, 값은 values라는 변수로 변환시키는 것입니다. dat1 %&gt;% select(sexgp, AGE, sleep1in, sleep2in, sleep3in) %&gt;% pivot_longer(-c(sexgp), names_to =&quot;variables&quot;, values_to = &quot;values&quot;) ## # A tibble: 132,028 × 3 ## sexgp variables values ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Women AGE 54 ## 2 Women sleep1in 1 ## 3 Women sleep2in 1 ## 4 Women sleep3in 1 ## 5 Women AGE 64 ## 6 Women sleep1in 4 ## 7 Women sleep2in 4 ## 8 Women sleep3in 4 ## 9 Women AGE 65 ## 10 Women sleep1in 1 ## # … with 132,018 more rows 평균에 대해서만 먼저 해보겠습니다. dat1%&gt;% select(sexgp, AGE, sleep1, sleep2, sleep3) %&gt;% pivot_longer(-c(sexgp), names_to =&quot;variables&quot;, values_to = &quot;values&quot;) %&gt;% group_by(sexgp, variables) %&gt;% summarise(avg = mean(values, na.rm =TRUE), std = sd(values, na.rm =TRUE), p50 = quantile(values, prob = 0.50, na.rm =TRUE), p25 = quantile(values, prob = 0.25, na.rm =TRUE), p75 = quantile(values, prob = 0.75, na.rm =TRUE) ) %&gt;% mutate(mean_std = sprintf(&quot;%.1f\\u00b1%.1f&quot;, avg, std), median_IQR= sprintf(&quot;%.0f (%.0f-%.0f)&quot;, p50, p25, p75)) %&gt;% select(sexgp, variables, mean_std) ## # A tibble: 8 × 3 ## # Groups: sexgp [2] ## sexgp variables mean_std ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 Men AGE 45.3±13.9 ## 2 Men sleep1 4.5±0.8 ## 3 Men sleep2 4.4±0.8 ## 4 Men sleep3 4.2±0.9 ## 5 Women AGE 47.7±14.8 ## 6 Women sleep1 4.3±0.8 ## 7 Women sleep2 4.3±0.9 ## 8 Women sleep3 4.2±1.0 무언가 복잡하지만 쉬워졌죠? 이말에 고개를 끄덕이셨다면 여러분은 이제 R coding에 빠져 들고 있는 것입니다. 이제 이것을 사람이 보기 편한 상태인 wide로 바꾸겠습니다. pivot_wider를 사용하고 우리가 원하는 가로로 필요한 정보를 names로 하고 원하는 값을 values로 하겠습니다. 이것을 tab1으로 정의하겠습니다. dat1 %&gt;% select(sexgp, AGE, sleep1, sleep2, sleep3) %&gt;% pivot_longer(-c(sexgp), names_to =&quot;variables&quot;, values_to = &quot;values&quot;) %&gt;% group_by(sexgp, variables) %&gt;% summarise(avg = mean(values, na.rm =TRUE), std = sd(values, na.rm =TRUE) ) %&gt;% mutate(mean_std = sprintf(&quot;%.1f\\u00b1%.1f&quot;, avg, std), median_IQR= sprintf(&quot;%.0f (%.0f-%.0f)&quot;, p50, p25, p75)) %&gt;% select(sexgp, variables, mean_std) %&gt;% pivot_wider(names_from = sexgp, values_from = c(mean_std)) -&gt; tab1 tab1 %&gt;% htmlTable(caption = &quot;Table 1. Basic Characteristics of study population&quot;) Table 1. Basic Characteristics of study population variables Men Women 1 AGE 45.3±13.9 47.7±14.8 2 sleep1 4.5±0.8 4.3±0.8 3 sleep2 4.4±0.8 4.3±0.9 4 sleep3 4.2±0.9 4.2±1.0 6.3 Count and Distribution heal_prob1 이 요통 변수라고 했었는데요, 1이 요통이 있다. 2가 요통이 없다 입니다. 이것을 표로 만들어 보겠습니다. ### 하나씩 반복 하나씩 반복하는게 가장 기본입니다. count를 사용하겠습니다. 요통이 몇몇 있나요? dat1 %&gt;% count(heal_prob1) ## # A tibble: 2 × 2 ## heal_prob1 n ## &lt;dbl+lbl&gt; &lt;int&gt; ## 1 1 [있다] 8930 ## 2 2 [없다] 24077 분율, 비율, 유병률을 나타내면 어떻게 될까요. 전체 합을 sum으로 만들고 이때 비율을 만들어야 합니다. dat1 %&gt;% count(heal_prob1) %&gt;% mutate(total = sum(n)) %&gt;% mutate(prob = n/total) ## # A tibble: 2 × 4 ## heal_prob1 n total prob ## &lt;dbl+lbl&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; ## 1 1 [있다] 8930 33007 0.271 ## 2 2 [없다] 24077 33007 0.729 남자만 해보겠습니다. dat1 %&gt;% filter(TSEX==1) %&gt;% count(heal_prob1) %&gt;% mutate(prob= n/sum(n)) ## # A tibble: 2 × 3 ## heal_prob1 n prob ## &lt;dbl+lbl&gt; &lt;int&gt; &lt;dbl&gt; ## 1 1 [있다] 3613 0.234 ## 2 2 [없다] 11860 0.766 여자만 해보세요. 6.3.1 Group_by summary and Table 1 group_by를 이용해 보겠습니다. 이면 위에서 연령을 이용한 방법을 실습했는데, 그것과 동일합니다 dat1 %&gt;% group_by(TSEX) %&gt;% count(heal_prob1) %&gt;% mutate(prob = n/sum(n)) ## # A tibble: 4 × 4 ## # Groups: TSEX [2] ## TSEX heal_prob1 n prob ## &lt;dbl+lbl&gt; &lt;dbl+lbl&gt; &lt;int&gt; &lt;dbl&gt; ## 1 1 [남성] 1 [있다] 3613 0.234 ## 2 1 [남성] 2 [없다] 11860 0.766 ## 3 2 [여성] 1 [있다] 5317 0.303 ## 4 2 [여성] 2 [없다] 12217 0.697 익숙한 형태로 표시해 보겠습니다. 그리고 필요한 것만 남겨 보겠습니다 . dat1 %&gt;% group_by(TSEX) %&gt;% count(heal_prob1) %&gt;% mutate(prob = n/sum(n)) %&gt;% mutate(smry1 = sprintf(&quot;%s (%.1f%%)&quot;, n, prob*100)) %&gt;% select(TSEX, heal_prob1, smry1) ## # A tibble: 4 × 3 ## # Groups: TSEX [2] ## TSEX heal_prob1 smry1 ## &lt;dbl+lbl&gt; &lt;dbl+lbl&gt; &lt;chr&gt; ## 1 1 [남성] 1 [있다] 3613 (23.4%) ## 2 1 [남성] 2 [없다] 11860 (76.6%) ## 3 2 [여성] 1 [있다] 5317 (30.3%) ## 4 2 [여성] 2 [없다] 12217 (69.7%) 이번에는 연령을 5세단위로 바꾸로 각 연령의 분포를 확인해 보겠습니다. dat1 &lt;-dat1 %&gt;% mutate(agegp = case_when( AGE &lt;25 ~ &quot;&lt;25&quot;, AGE &lt;30 ~ &quot;&lt;30&quot;, AGE &lt;35 ~ &quot;&lt;35&quot;, AGE &lt;40 ~ &quot;&lt;40&quot;, AGE &lt;45 ~ &quot;&lt;45&quot;, AGE &lt;50 ~ &quot;&lt;50&quot;, AGE &lt;55 ~ &quot;&lt;55&quot;, AGE &lt;60 ~ &quot;&lt;60&quot;, TRUE ~ &quot;\\u226560&quot; # 나머지는 모두 &gt;65 (\\u2265는 크거나 같다는 symbol) )) dat1 %&gt;% group_by(TSEX) %&gt;% count(agegp) %&gt;% mutate(prob = n/sum(n)) %&gt;% mutate(smry1 = sprintf(&quot;%s (%.1f%%)&quot;, n, prob*100)) %&gt;% select(TSEX, agegp, smry1) %&gt;% arrange(TSEX, agegp) ## # A tibble: 18 × 3 ## # Groups: TSEX [2] ## TSEX agegp smry1 ## &lt;dbl+lbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 1 [남성] &lt;25 718 (4.6%) ## 2 1 [남성] &lt;30 1489 (9.6%) ## 3 1 [남성] &lt;35 1677 (10.8%) ## 4 1 [남성] &lt;40 1998 (12.9%) ## 5 1 [남성] &lt;45 1988 (12.8%) ## 6 1 [남성] &lt;50 1872 (12.1%) ## 7 1 [남성] &lt;55 1634 (10.6%) ## 8 1 [남성] &lt;60 1479 (9.6%) ## 9 1 [남성] ≥60 2618 (16.9%) ## 10 2 [여성] &lt;25 833 (4.8%) ## 11 2 [여성] &lt;30 1390 (7.9%) ## 12 2 [여성] &lt;35 1613 (9.2%) ## 13 2 [여성] &lt;40 1707 (9.7%) ## 14 2 [여성] &lt;45 1861 (10.6%) ## 15 2 [여성] &lt;50 2163 (12.3%) ## 16 2 [여성] &lt;55 2315 (13.2%) ## 17 2 [여성] &lt;60 2105 (12.0%) ## 18 2 [여성] ≥60 3547 (20.2%) 6.3.2 Long File and Table 1 그럼 이번에는 요통과 연령집단을 동시에 바꾸어 보겠습니다. dat1 %&gt;% mutate(backpain= case_when(heal_prob1==1 ~ &quot;pain&quot;, TRUE ~ &quot;no-pain&quot;)) %&gt;% select(sexgp, agegp, backpain) %&gt;% pivot_longer(-c(sexgp), names_to =&quot;variables&quot;, values_to = &quot;values&quot;) %&gt;% group_by(sexgp, variables) %&gt;% count(values) %&gt;% mutate(prob = n/sum(n)) %&gt;% mutate(smry1 = sprintf(&quot;%s (%.1f%%)&quot;, n, prob*100)) %&gt;% select(-n, -prob) %&gt;% pivot_wider(names_from = sexgp, values_from = smry1) -&gt; tab2 html 테이블로 살펴 보겠습니다. tab2 %&gt;% htmlTable() variables values Men Women 1 agegp &lt;25 718 (4.6%) 833 (4.8%) 2 agegp &lt;30 1489 (9.6%) 1390 (7.9%) 3 agegp &lt;35 1677 (10.8%) 1613 (9.2%) 4 agegp &lt;40 1998 (12.9%) 1707 (9.7%) 5 agegp &lt;45 1988 (12.8%) 1861 (10.6%) 6 agegp &lt;50 1872 (12.1%) 2163 (12.3%) 7 agegp &lt;55 1634 (10.6%) 2315 (13.2%) 8 agegp &lt;60 1479 (9.6%) 2105 (12.0%) 9 agegp ≥60 2618 (16.9%) 3547 (20.2%) 10 backpain no-pain 11860 (76.6%) 12217 (69.7%) 11 backpain pain 3613 (23.4%) 5317 (30.3%) 무슨 생각이 드시죠? tab1과 tab2를 합치면 좋겠다는 생각이 드시죠, tab1에는 values 라는 변수가 없습니다 .그래서 합치기 어렵습니다. values 라는 변수를 생성하고 합쳐 보겠습니다. tab1 = tab1 %&gt;% mutate(values = &quot;&quot;) %&gt;% select(variables, values, Men, Women) rbind(tab1, tab2) %&gt;% htmlTable() variables values Men Women 1 AGE 45.3±13.9 47.7±14.8 2 sleep1 4.5±0.8 4.3±0.8 3 sleep2 4.4±0.8 4.3±0.9 4 sleep3 4.2±0.9 4.2±1.0 5 agegp &lt;25 718 (4.6%) 833 (4.8%) 6 agegp &lt;30 1489 (9.6%) 1390 (7.9%) 7 agegp &lt;35 1677 (10.8%) 1613 (9.2%) 8 agegp &lt;40 1998 (12.9%) 1707 (9.7%) 9 agegp &lt;45 1988 (12.8%) 1861 (10.6%) 10 agegp &lt;50 1872 (12.1%) 2163 (12.3%) 11 agegp &lt;55 1634 (10.6%) 2315 (13.2%) 12 agegp &lt;60 1479 (9.6%) 2105 (12.0%) 13 agegp ≥60 2618 (16.9%) 3547 (20.2%) 14 backpain no-pain 11860 (76.6%) 12217 (69.7%) 15 backpain pain 3613 (23.4%) 5317 (30.3%) 6.4 정리 1 원하는 데이터를 불러옴 원하는 변수를 선정 관심 변수 (종속, 독립) 변수 값을 살펴 보기 숫자 인지 아닌지 missing value 가 얼마 인지 제외할 변수가 얼마인지 대표값 생성 count 함수 사용, prob 변수 생성 표 생성 반복 group_by long file 6.4.1 과제 원하는 집단 변수 (남녀, 고용관계 등)과 연속형변수 (연령 등) 5개, 비연속변수 4개 를 선정하여 Table 1을 만드시오. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
